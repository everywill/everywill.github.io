{"meta":{"title":"everywill","subtitle":null,"description":null,"author":"everywill","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2017-02-12T13:31:04.000Z","updated":"2017-02-12T13:31:55.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"css secret 阅读笔记","slug":"css-secret-阅读笔记","date":"2017-03-12T03:07:42.000Z","updated":"2017-03-12T03:10:35.000Z","comments":true,"path":"2017/03/12/css-secret-阅读笔记/","link":"","permalink":"http://yoursite.com/2017/03/12/css-secret-阅读笔记/","excerpt":"","text":"关于CSS标准CSS标准的流程Working Draft =&gt; Candidate Recommendation =&gt; Recommendation css3与css2.1的区别将原来的规范打散到各个小模块中： CSS语法 CSS层叠与继承 CSS颜色 选择符 CSS背景与边框 CSS值与单位 CSS文字排版 CSS文字装饰效果 CSS字体 CSS基本UI特性 新增模块： CSS变形 图像混合效果 滤镜效果 CSS遮罩 CSS伸缩盒布局 CSS网格布局 尽量是代码变得可维护： rem将相对于根元素（html）字号进行计算。 媒体查询：应尽量使用em或百分比来自适应布局，媒体查询仅应在断点时用到，而查询断点不应该由具体的设备决定，而是应该根据设计自身来决定。 尽量让屏幕宽度来决定列的数目，比如指定列的宽度而不是列的数量，使用inline-block加折行或者flexbox。 不要害怕使用short-hand的属性，这是一种良好的防卫性编码方式，可以抵御未来的风险。 myth，实验性质的css预处理器，CSSpolyfill。 背景与边框半透明边框 背景一直延伸到border，margin的背景永远是transparent（如同CSS2.1规范所说）。 多重边框 box-shadow（叠加到下层）模拟，没有实体边框的特性比如虚线边框，需要空出额外的margin或padding来模拟。 outline（在box-shadow上层）模拟，只能和border合作出2层边框，并且现阶段无法贴合圆角边框，只能是直角（可能在将来被修复）。 灵活的背景定位 在background-position中现可指定偏移量相对的起点（right 20px bottom 10px），但要注意做好回退方案。 background-origin是背景图片偏移的空间，默认为padding-box（不至于被边框遮盖）。 calc()在使用时需要在-和+运算符的左右两侧都加上空格以示区分（未来可能支持关键字，而关键字可能包含这些符号），参与运算的数可以是、等。 边框内圆角 当需要一个元素来实现时，可以使用outline和box-shadow合作来生成。 条纹背景（横条纹，竖条纹，斜条纹） linear-gradient（to top是0deg， to bottom是180deg，默认为to bottom）生成的也是background-img（注意background-image在叠加时，声明在前的在最上层），设置size后根据背景图片的平铺可做条纹背景；色标的位置值会比在它之前的任何一个都大，可以利用这一点来是色标位置尽量简洁。 repeating-linear-gradient（颜色值后若无位置值，默认为0）是linear-gradient的循环，可以实现后者的条纹效果，并且可以更快捷的生成任意角度的斜条纹。 渐变产生的是背景图片，因此可以将其叠加在背景之上产生一些效果（实现条纹）。 复杂的背景图案 radial-gradient工作原理和linear-gradient类似。 css可以将一个语句打断为多行，在换行处用/来转义换行符。 随机的背景图片 质数原则，是公倍数最大从而使循环能不被识别出来（可应用于动画中）。 连续的图像边框（内容增长时，图片将隐藏的部分显示出来） background：background-origin和background-clip组合，可以层叠多个背景图片，让背景从border中透出来。 信封样式边框：可以使用background来实现，也可使用border-image来实现。 蚂蚁行军样式。 自适应的椭圆 可以利用border-radius的百分比来生成；注意border-radius的简写方法，斜杠前指定的水平半径，斜杠后指定竖直半径，从左上角顺时针开始指定；一个coner水平半径或垂直半径中有一个为0，另外一个也会被计算为0。 平行四边形 transform只能用于transformable的元素，包括block-level，atomic inline-level，以及display计算值为table-row, table-row-group, table-header-group, table-footer-group, table-cell和table-caption的元素。 伪元素（before，after）可用于多种解决方案中：多重边框，边框内圆角，多重背景。 菱形图片 利用transform: rotate；transform-orgin在未指定时为元素的中心；若width, height按百分比进行缩放，将以top, left为起点进行缩放。 clip-path：左边从元素左上角开始，有polygon, circle等形状。 切角效果 使用linear-gradient或radial-gradient可以实现三角形切角或者圆弧切角。 注意linear-gradient中指定的step是渐变路径上的；gradient无法应用动画。 border-image实现时需注意设置边框色作为平稳的回退，注意设置background-clip使其不至于fu’gai覆盖切角的效果。 clip-path中可以使用百分比，长度以及calc计算式。 梯形标签页 注意3D形变和2D形变不同，2D形变可利用内部逆向的形变取消变形效果，3D形变在内部取消变形效果相对复杂。 3D形变将导致各因素间互相干扰，比如transform-origin，rotate和元素的宽度都会影响形成的梯形的角度。 简单的饼图 可以利用动画（animation）来实现饼状图：负的animation-delay和动画的暂停状态（animation-play-state:paused）可以使动画停止在指定的状态。 svg的viewbox可以设定svg的坐标系视图；利用描边（stroke）的虚线（stroke-array，第一个参数是虚线段长度，第二个参数是虚线间隔，指定的值都是对圆周而言）。 单侧投影 box-shadow的工作原理：以指定颜色画一个border box大小的矩形，模糊半径指定边界到发生阴影色和纯透明色的过渡长度，总的为模糊半径两倍，与元素交集部分被切除（与text-shadow不同，text-shadow文字下层的投影不会被截切）；box-shadow的第四个值为扩张半径，矩形将按指定值每一边都向外扩张或向内收缩指定值。 可以利用上述box-shadow特性实现单侧投影，邻边投影和双侧投影。 不规则投影 filter（滤镜）：css filter是svg filter的简化版，可以在一些box-shadow无能为力的场合（透明或半透明的背景，伪元素的场合）产生效果（filter: drop-shadow来代替box-shadow，但drop-filter将给text-shadow也投下阴影）；sepia将使每个像素的色相收敛到40左右，带上老式照片的效果；saturate用来控制饱和度，以百分比为单位；hue-rotate用来旋转色相;滤镜可以应用动画（transition）。 染色效果 染色为了给一系列风格迥异的照片带来视觉上的一致性；可以使用css滤镜实现；也可使用混合模式，混合模式有两种使用方式，mix-blend-mode为整个元素应用混合，但需要这个元素外部再包裹一个元素，与包裹元素的背景进行混合，background-blend-mode为元素的背景应用混合，用luminosity混合时下层将保留色相和饱和度，上层保留亮度信息;混合无法应用动画效果（transition），但可以借助下层或上层图片的动画来间接实现。 毛玻璃效果 给需要毛玻璃效果的元素添加伪元素，应用背景（只适合background-attachment:fixed），css filter的blur可以使当前元素模糊，参数为模糊半径，将减少实色像素的覆盖范围; 注意应用z-index时，stacking context的关系。 折角效果 两个伪元素的缺点:只适合45度折角以及纯色背景下的折角。 两层lnear-gradient背景:注意留出足够的padding防止文字叠加到折角效果上。 字体排印连字符断行 属性hyphen（auto, none, manual）可以设置连字符断行，manual为人工添加&shy;来进行断行判断，auto为自动判断但优先考虑人工添加，none表示不处理（浏览器支持度不高）。 插入换行 可以在需要换行前的元素加上伪元素，利用content:”\\A”和white-space:pre来控制换行。 注意末尾的换行可能导致额外的空格，使用负的margin可以抵消。 文本的斑马线条 不使用元素包裹来控制背景而直接利用和行高的关系在背景上使用渐变直接生成。 调整tab宽度 可以使用tab-size来指定其宽度。（兼容性不是很好） 华丽的&amp; font-family的选择顺序对单字符也起效（即可应用只包含单个字符的font-family）。 使用@font-face可以引入自定义的font-family；local可以指定来自本地font-family；unicode-range可以指定该条规则引入的font-family可以应用的字符，可以指定单个字符（开头需加U+），多个字符用逗号隔开，范围用-来连接。 自定义下划线 使用background-image来模拟，渐变能够生成各种形式的下划线，配合text-shadow可以模拟下划线遇到文字不显示。 现实中的文字效果 出现在底部的浅色投影（或者出现在顶部的暗色投影）会让人产生物体是凹进平面内的错觉。同理，出现在底部的暗色投影（或者出现在顶部的浅色投影）会让人产生物体从平面上凸起的错觉。 空心字效果 使用多层txt-shadow，注意应用模糊将使性能下降。 文字外发光 可以由若干层模糊的text-shadow来实现;但以此方法实现模糊效果缺少回退，若需有回退方案可用滤镜（blur）。 文字凸起效果 使用多层text-shadow，逐层减低亮度，最后一层增加大的模糊。 用户体验选用合适的鼠标光标 cursor新增了not-allowed提示禁止状态，none来隐藏鼠标光标。 扩大可点击区域（热区） 注意元素的边框也是热区（而outline和box-shadow不是），因此可使用扩大的透明边框；在这种情况下要增加边框效果可使用box-shadow，inset将使shadow从border的内侧向内绘制。 伪元素可以代表他父元素来响应鼠标交互事件，可以借此扩大热区。 自定义复选框 当label元素与复选框关联之后，可以起到触发开关的效果；因为label不是可替换元素（复选款是可替换元素），因此可以为它添加生成性内容（例如伪元素）；隐藏真实的input时，不应使用display:none，为了保证可访问性使用绝对定位后对其进行clip截切比较好（clip只可应用于绝对定位元素）。 开关式按钮 可以使用自定义复选框的技巧（语义上也没有差别）。 通过阴影来弱化背景实现遮罩 可以用一个大的box-shadow来简单模拟，扩张半径使用使用视口单位为最佳（vmax，1vmax 相当于 1vw 和 1vh 两者中的较大值，100vw 等于整个视口的宽度，100vh 就是视口的高度）；但这种方法无法阻止用户与遮罩之后的元素进行交互，box-shadow并不能捕捉事件。 使用伪元素也可以实现，同样节省了一个htnl元素，但无法为伪元素独立的绑定事件。 新标签dialog，通过其上的showModal可以唤起模态框（原生的对话框），其上另有伪元素:backdrop用来控制遮罩样式。 通过模糊来弱化背景 将除对话框之外的其他页面元素包进一个main元素，呼出对话框时对其应用模糊滤镜，但不适合在main元素上应用降低亮度形成阴影（边缘会因模糊产生光晕效果），阴影适合box-shadow来做。 滚动提示 默认的background都相对于元素固定（当元素内容有滚动时），类似于background-attachment: fixed（fixed将使background对于viewport定位，虽然依然会被containing block所截切），background-attachment: local将使背景跟随内容滚动。 transparent是rgba(0,0,0,0)的简写，在使用渐变时注意若从白色渐变而来，过程中会出现灰色色调。 交互式的图片对比控件 （resize方案）resize可以应用于所有overflow不为visible的元素（img还不行，chrome中也不支持调整到比原始尺寸小）。 （resize方案）object-position和object-fit将可以像控制背景图片一样控制replaced element内容。 （resize方案）pointer-events取值auto和none（为none时，鼠标事件的target将不会到这个元素，但依然可能在冒泡过程中触发此元素上的事件）。 结构与布局自适应内部元素 width新加关键字min-content, max-content, strench, fit-content；分别对应于min preferred width，preferred width, available width和min(preferred width, max(min preferred width, available width))。 精确控制表格列宽 在table-layout为auto时，cell将根据内容宽度生成，text-overflow将无法生效；在使用table-layout：fixed的时候，注意需要设置table的width为auto之外的其他值。 根据兄弟元素的数量来设置样式 :nth-child(n)选择作为第n个的该元素，类似的有:nth-last-child(n)，only-child相当于:first-child:last-child。 可以使用li:first-child:nth-last-child(n), li:first-child:nth-last-child(n)~li可以选中有n个元素时的情况。 根据兄弟元素数量范围来设置样式 li:first-child:nth-last-child(n+b), li:first-child:nth-last-child(n+b)~li将选中b个及以上元素时的所有；li:first-child:nth-last-child(-n+b), li:first-child:nth-last-child(-n+b)~li选中b个及以下元素时的所有。 满幅的背景，定宽的内容 使用左右padding的calc(50% -定宽的一半)可以代替margin:auto方案；但有局限不能左右溢出，overflow:hidden只能截到padding。 垂直居中 表格布局法：利用table-cell特性是其能垂直居中。 行内块法：一个与父元素等高的inline-block伪元素，需要垂直居中的元素与他进行vertical-align:middle。 绝对定位：利用绝对定位的top和left以及transform的translate（百分比以自身维度为参照），此方案有可能使元素模糊（存在停留在半像素点上的可能），使用transform-style：preserve-3d可以修复（建立了3d渲染环境）。 视口单位：需注意margin的百分比是按照containing block的宽度为参照；vw是视口宽度相关，vh是视口高度相关，vmax为两者中较大者，视口的宽度（或高度）被分为100vw（或100vh）。 flexbox： 紧贴底部的页脚 固定高度（将主题的min-height设为100vh减去页脚的高度）。 flex 过渡与动画缓动效果 首先需要注意，位移动画使用transform的translate比定位（top, margin-top之类）效果好，因为后者需要对齐到像素。 回弹效果可以显著增加动画的体验在位移，尺寸和角度变化等场景时，可以考虑回弹。 用作回弹（缓动）效果的时间函数animation-timing-function/transitiin-timing-function，精细的可以用cubic-bezier参数指定，控制锚点的水平坐标和垂直坐标互换可以得到一个调速函数的相反版本。 注意transform中的scale无法对inline的元素起效，可以利用cubic-bezier的调速函数来实现一定的回弹效果（弹性过渡方案），此方案不适用与颜色的回弹，可用transition-property来具体制定需要控制的属性。 逐帧动画 gif修改不方便，并且不具有a通道透明度（只有一种透明色），只有256色。 调速函数中的steps配合bakground实现，steps中前一个参数表示分的step数，后一个参数表示是在开始还是结束阶段发生变化（start或者end）。 闪烁效果 animation的keyframes里to和from（被称为keyframe selector）等同于100%和0%，不指定时默认为原元素当前的计算值。 animation-direction的作用是反转循环周期：reverse反转每一个循环周期，alternate反转第偶数个循环周期，alternative-reverse反转第奇数个循环周期，默认为normal。 打字动画 ch新的长度单位，表示0字符的宽度，在等宽字体时有较大的用处（支持性良好）。 状态平滑的动画 当触发动画的事件消失后，动画默认将立即停止并跳回到开始状态，需使其平滑。 background-size的百分比将以建立background-position的矩形为根据，缺少的维度根据内在比例计算出。 在某一事件发生时出现的动画可以理解为动画在此状态下启动，没有触发时处于暂停状态（animation-play-state: play or paused）。 沿环形路径平移的动画 transform-origin其实是一个语法糖，可以使用translate来实现相同的功能。","categories":[],"tags":[{"name":"css secret","slug":"css-secret","permalink":"http://yoursite.com/tags/css-secret/"}]},{"title":"CSS2.1 SPEC 翻译及笔记","slug":"CSS2-1-SPEC-翻译及笔记","date":"2017-02-12T13:18:06.000Z","updated":"2017-03-12T03:10:24.000Z","comments":true,"path":"2017/02/12/CSS2-1-SPEC-翻译及笔记/","link":"","permalink":"http://yoursite.com/2017/02/12/CSS2-1-SPEC-翻译及笔记/","excerpt":"","text":"对css2.1 spec翻译理解的笔记整理 语法与基本数据类型值 整数和实数，长度，百分比，url和uri，计数器，颜色，字符串（’\\A’换行）。 em相对字体大小。 子元素一般继承computed value（除了数值）。 选择器伪元素和伪类选择器 匿名盒不在文档树中，计算子集时不加入考虑。 :first-line伪元素只能出现在block container element，可能出现在相同flow（没有被定位且不float）的block-level后代中，但不能在table-cell或inline-block的后代中。 :first-letter应用于block container element，可应用于同一个flow中含有文本的后代，但不能在table-cell或inline-block的后代中（必须出现在first formatted line），计算时包括:before和:after在内的文本。 属性赋值，层叠和继承specified, computed and actual values specified value指定的先后顺序：如果层叠产生一个值，就使用它；否则，如果属性是继承的并且元素不是文档的根，使用父元素的computed value；否则使用初始值。 computed value和used value都做绝对化的工作，computed value计算时不需要渲染文档， used value计算时需要文档已布局。 actual value针对客户端环境做近似。 继承 当出现继承时，元素继承computed value；父元素的computed value同时成为子元素的specified value和computed value。（可穿过匿名盒继承）。 根元素的继承为继承自身initial value。 层叠 重要性（升序）：user agent声明 &lt; user normal声明 &lt; author normal声明 &lt; author important声明 &lt; user important声明；重要性相同则根据选择器特殊性。 盒模型box dimensions content, padding, border, margin。 margin：背景永远是transparent；non-repalced inline的元素竖直margin不起效；若指定百分比，参照containing block的宽度计算；computed value是指定的百分比或绝对长度；应用于除了除了table-caption, table, inline-table以外的table dispaly的所有元素。 collapsing margins（合并margin）：根元素(html)的margin不参与合并；水平margin不合并；如果一个有clearance的元素的top和bottom margin相邻，它的margin会与紧跟的兄弟的相邻margin合并，但生成的margin不会与父级的bottom margin合并。 两个margin相邻的条件：都属于in-flow的block-level box，在同一个bfc中；没有line box, clearance, padding和border把它们隔开；来自于下列某对：一个盒的top margin和它的第一个in-flow子级的top margin；一个盒的bottom margin和它的下一个in-flow的兄弟的top margin；最后一个in-flow的子级和它父级的bottom margin，如果父级的高度computed value为’auto’；一个盒的top和bottom margin，如果该盒没有建立一个新的bfc并且min-height的computed value为0，height的computed value为0或auto，并且没有in-flow子级。 padding：若指定百分比，参照containing block的宽度计算；应用于除table-row-group, table-header-group, table-footer-group, table-row, table-column-group和table-column外的所有元素。 border：当不指定border-color时，取color的值；当不指定border-style时，初始值为none将不显示边框。 可视化格式模型block-level element、block-level box block-level element(display: block, table, list-item). block-level box(由block-level element生成)， 参与BFC。 block container box(除了table和replaced element的 block-level box，但包括non-replaced的 inline-block和table-cell), 只能包含block-level box或者inline-level box。 同时为block-level box和block container box的称为block box。 block container内如果有一个block-level box，则强制它只含有block-level-box。 anonymous block box：（为了fomatting更加方便）如果一个block container包含一个block-level box, 则强制它只包含block-level box；anonymous block box的可继承属性继承自包裹它的non-anonymous box，不可继承属性取initial value；当处理百分比时，anonymous block box讲被忽略，用最近的non-anonymous祖先box来代替。 当inline box包含in-flow的block-level box, 它和它inline祖先将在这一行被分割成两个并被包在anonymous block box。 inline-level element, inline-level box inline-level element(display: inine, inline-table, inline-block)。 inline-leve box(由inline-level element生成，参与IFC)。 inline-box: 特殊的inline-level box,其内容参与它containing IFC(需同时具备non-replaced和display:inline)。 atomic inline-level box(replaced inline-level, inline-block, inline-table):作为单一的opaque box参与IFC。 anonymous inline box(同样是block container内): 从其block parent box继承可继承属性，不可继承属性取initial value。 display initial value为inline, 但UA默认样式表有重写。 block：让元素产生一个block box。 inline-block: 让元素生成一个inline-level block container。内部格式化成一个block box, 本身格式化成atomic inline-level box. inline: 让元素生成一个或多个inline box。 list-item：让元素生成一个pricipal block box和一个marker box(block-level box都是pricipal，除了anonymous)。 none：不生成box。 position schemes(3种定位模式) normal flow: 包括block-level box的block formatting，inline-level box的inline formatting及它们的相对定位。 float: 先根据normal flow布局，然后抽出尽可能的左移或者右移，其他内容沿着box float的一侧排列。 ablosule position: 从normal flow中全部移走，根据containing block确定位置。 如果一个元素是浮动的，绝对定位的或者是根元素，则它是out of flow；否则为in-flow。一个元素的flow包括它自身及所有以它为最近out of flow祖先元素的元素。 position static: 根据normal flow 布局。 relative: 在table-row-group, table-header-group, table-footer-group, table-row, table-column-group, table-cell和table-caption上没有定义。 absolute: 位置（可能包括size）由top, right, bottom, left根据containing block决定。 fixed: 同上根据absolute model计算position。 top, right, bottom, left 对于绝对定位，定义了margin edge到containing block edge的距离；对于相对定位，定义到normal flow中位置的距离。 百分比参照containing block的宽度或高度。 auto normal flow 在normal flow中，block-level box参与BFC，inline-level box参与IFC。 BFC: 浮动，绝对定位，不是block box的block container（如inline-blocks, table-cells, table-caption）以及overflow属性不为visible将为其内容建立新的BFC。 IFC: 包含来及同一行的box的矩形区域成为line box；line box的宽度由包含块和浮动决定，line box的高度由line-hight计算给出；宽度有多余时对齐参照text-align，如果是justify会对inline box中的空格和字间距进行拉伸（不包括inline-table和inline-block）。若inline box的宽度超过了line box，如果不能分割就overflow，如果可以分割，margin, border, padding在分割处不可见，在同一lline box内，inline box也可能进行分割。 没有文本、保留空白符（preserved white space）、margin，padding或者border非0的内联元素、其它流内内容（例如，图片，inline block或者inline table），并且不以保留换行符（preserved newline）结束的行盒必须被当作一个0高度的行盒，为了确定它里面所有元素的位置，而其它时候（for any other purpose）必须当它不存在。 相对定位 可能在根据normal flow或者float排列后的偏移，会引起overflow: auto和scroll的变化。 保留在normal flow时的换行和空格 left在ltr时战胜right，在rtl时相反。都为auto时，used value为0；bottom和top都指定时，bottom将被无视。 浮动 浮动的box向左或者向右移动时将直到自己的outer edge达到containing block的edge或者别的浮动box的outer edge; 如果存在line box，则与current line box top对齐。 current和subsequent line box将为给float的margin box腾出空间而缩短（如果缩短到不能容纳任何内容，该line box将会向下移动）0 height或者负hight的浮动盒不影响line box的宽度。 table, block level replaced元素以及在nomal flow中建立了新BFC的元素的border box不能与和元素在同一个BFC中的任何浮动的margin box重叠；如果必须的话，将此元素放在所有之前float的下方来clear此元素，但如果空间足够，可以放置与浮动相邻。 浮动的内容会发生堆叠，像生成了新的stacking context，所有positioned和实际创建了stack context；浮动可以和normal flow中的其他box发生重叠，将在non-positioned in-flow block之前， 在in-flow inline之后。 float属性 只适用于不是绝对定位类型的元素；根元素上float视为none。 一个向左浮动box的left outer edge不能在cobtaining block的left edge的左边，向右浮动类似。 如果current box是向左浮动的，并且在这之前源文档中还有元素生成了左浮动盒，那么对于每一个之前的盒，要么当前盒的left outer edge在之前的盒的right outer edge的右边，要么它的top要比之前的盒的bottom低，右浮动盒类似。 一个左浮动盒的right outer edge不能位于接着它的任意右浮动盒的left outer edge的右边，右浮动盒类似。 一个浮动盒的outer top不能高于其containing block的top。当浮动（盒）出现在两个合并的margin之间时，浮动（盒）的定位就像它有一个empty anonymous block parent存在于（当前）流一样。这个父级的位置通过margin collapse through章节中的规则来定义 一个浮动盒的outer top不能高于源文档中任何在此之前的元素生成的block box或者floated box的outer top。 一个元素的浮动盒的outer top不能高于任何含有源文档中在此之前的元素生成的盒的line box的top。 左边存在另一个左浮动盒的左浮动盒的outer right不能位于其包含块的right边的右边（不严谨的：一个左浮动盒不能超出right边，除非它已经尽量向左（紧挨着包含块的left边）了）。右浮动元素也有类似的规则。 浮动盒必须尽量往高处放，左浮动尽量往左放，右浮动尽量往右放；更高的位置比更左或更右更优先。 clear 一个元素的盒的哪一边不能与之前的浮动盒相邻；不考虑元素内的浮动和其它BFC中的浮动。 要求该盒的top border edge位于源文档中在此之前的元素形成的所有浮动盒的bottom outer edge下方。 值不为’none’就将可能引入clearance。clearance会阻止margin合并，并作为元素margin-top上方的空间。用来在竖直方向上推着元素越过浮动。 计算clearance时，需要假定该元素没有clear属性时的top border edge；如果此时的top border edge的没有越过（past）相关的浮动（盒），那么就得引入空隙，并影响margin的合并。 空隙的amount被设置为下面两者的较大值：把block的border edge放在最低的将被clear的浮动的bottom outer edge所必需的高度；把block的top border边放在其假定位置（clear为’none’时的位置），所必需的高度。 clearance可以是0或者负值。 当clearance应用于浮动元素时，将给浮动定位增加一条规则：浮动top outer edge必须处于所有在此之前的左浮动盒（’clear: left’），或者所有在此之前的右浮动盒（’clear: right’）的bottom outer edge下方，或者两者都要满足（’clear: both’）。 绝对定位 可能会遮住其它盒的内容（或者它们自身被遮住），取决于重叠盒的stack levels。包括fixed和absolute。 display, position和float之间的关系 如果display: none，postion和float均不应用，元素不生成box。 否则，如果position为absolute或fixed, 盒是绝对定位的，并且float的computed value为none，盒的位置由top, right, bottom, left和盒的containing block一起决定, display的计算值根据如下设置：inline-table-&gt;table; inline, table-row-group, table-column, table-column-group, table-header-group, table-footer-group, table-row, table-cell, table-caption, inline-block-&gt;block; 其余计算值与指定值相同。 否则，如果float不为none，盒是浮动的，display计算值如上规则计算。 否则，如果是根元素，display计算值如上规则计算，但list-item除外，未定义。 否则，display计算值采用指定值。 Layered presentation z-index: 应用于positioned元素，指定了在当前stacking context中的stack level；指定该box是否建立一个stacking context，除了auto以外的值将建立新的stacking context，auto值只能为根元素建立stacking context。 每个盒都属于一个stacking context。给定stacking context中每个positioned盒都有一个整型堆叠层级，表示它在同一堆叠上下文中相对于其它堆叠层级的Z轴上的位置。堆叠层级更大的总被格式化在堆叠层级低的前面，盒可以有负的堆叠层级。同一个堆叠上下文中堆叠层级相同的盒按照文档树顺序从后向前堆叠。每个stacling context是atomic的。 root元素形成root stacking coontext。其它stacking context由任意’z-index’的计算值不为’auto’的positioned元素生成。 绘制顺序：生成stacking context元素的background和border；stacking level为负数的子级stacking context（最负的优先）；in-flow，none-inline，non-positioned后代；non-positioned的浮动（元素）；in-flow，inline，non-positioned的后代，包括inline table和inline block；stacking level为0的子级stacking context，以及stacking level为0的positioned的后代；stacking level为正数的子级stacking context（最小的优先）。 文本方向：direction和unicode-bidi可视化格式模型细节containing block 一个元素生成的盒的position和size有时依赖于它的containing block，它的containing block的定义如下：根元素所在的containing block被称为initial containing block，具有viewport的大小；如果一个元素position是relative或者static，它的containing block由最近的祖先block container的coontent区建立；如果position为fixed，containing block由viewport建立；如果position为absolute，containing block由最近的position为relative, fixed或者absolute的祖先元素建立，具体如下：如果该祖先是一个inline element，containing block就是环绕该元素生成的第一个和最后一个inline box的padding box的bounding box，如果元素跨行，则container block是未定义的；否则，containing block就是该祖先的padding边界形成。 内容宽度 width 应用于除non-replaced的inline, table row和row group。 指定一个百分比根据生成的盒的包含块的宽度来计算。如果包含块的宽度取决于该元素的宽度，那么产生的布局在CSS 2.1中是未定义的。 计算width和margin usesd value就是把计算值auto替换成一些合适的值，把百分比根据包含块计算出来，但存在例外。以下情况需要加以区分（ 下面要计算的width的used value只是一个暂定的，可能不得不计算很多次，取决于min-width和max-width）： inline, none-replaced element：width属性不适用。计算值为auto的margin-left或者margin-right对应的应用值为0。 inline, replaced element：计算值为auto的margin-left或者margin-right的应用值为0；如果height和width的computed value都是auto，并且该元素还具有内在宽度，那么这个内在宽度就是width的used value；如果height和width的计算值都是auto，并且该元素没有内在宽度，但具有内在高度和内在比例，或者如果width的计算值为auto，height具有其它计算值，并且该元素有内在比例，那么width的应用值为：(高度的应用值) * (内在比例)；如果height和width的计算值都是auto，并且该元素具有内在比例但没有内在高度或者宽度，那么width的应用值在CSS 2.1是未定义的，然而，建议如果包含块的宽度不依赖可替换元素的宽度，那么’width’的应用值根据用于常规流中块级不可替换元素的约束等式来计算；否则，如果width的计算值为auto，并且该元素具有内在宽度，那么这个内在宽度就是width的应用值；否则，如果width的计算值为auto，但不满足上面的条件，那么width的应用值变为300px，如果300px对于适应设备来说太宽，UA应该应用适应设备的最大的比例为2:1的矩形代替。 block-level, non-replaced elements in normal flow：需要保持如下约束，margin-left + border-left-width + padding-left + width + padding-right + border-right-width + margin-right = containing block的宽度；如果width的computed value不为auto，且其余值computed value也不为auto，则这些值over-constrained，根据direction，若ltr则用margin-right来满足，若rtl则用margin-left来满足；如果width的computed value不为auto，其余值中有computed value为auo，则用它的used value来满足；如果width为auto，其余为auto的值used value为0，width用来满足等式；如果margin-left和margin-right都为auto，则平分以至于水平居中。 Block-level, replaced elements in normal flow：width的used value由replaced inline-level 元素的规则决定；用none-replaced block-level element的规则来确定margin。 Floating, non-replaced elements：如果margin-left或者margin-right的computed value为auto，则应用值为0；如果width的computed value为auto，应用值为shrink-to-fit宽度，算法与table cell的automatic table layout算法类似，preferred width只包含显式换行计算出，preferred minimum width尝试所有可能的换行计算出，available width通过containing block的宽度减去margin-left，border-left-width，padding-left，padding-right，border-right-width，margin-right和所有相关滚动条的宽度的应用值得出。shrink-to-fit的宽度就是min(max(preferrd minimum width, available width), preferrd width)。 Floating, replaced elements：如果margin-left或者margin-right的computed value为auto，则应用值为0。width的used value由inline，replaced元素规则决定。 static position：指4方面，static-position containing block是元素position为static且float为none时的containing block；left static position是从containing block的left边到作为该元素的第一个盒的假想盒的left margin边的距离，假想盒的position属性是static并且float为none；如果假想盒在containing block的左边，那么值为负；right的static position是从containing block的right边到与上面相同的假想盒的right margin边，如果假想盒在containing block边的左边，那么值为正；top的static position是从containing block的top edge到假想盒的top margin edge。 除下一条规则所列情况，均需如下计算：如果left和width都是auto，right不是auto，则宽度shrink-to-fit，再求出left；如果width和right都是auto，left不是auto，则宽度shrink-to-fit，再求出right；如果left和right都是auto，width不是auto，如果建立static-position containing block元素的direction属性是ltr，就把left设置为static position，然后求出right（如果direction是rtl，把right设置为static position，然后求出left）；如果left是auto，width和right都不是auto，则求出left；如果width是auto，left和right都不是auto，则求出width；如果right是auto，left和width都不是auto，则求出right。 Absolutely positioned, non-replaced elements：需符合以下等式：left + margin-left + border-left-width + padding-left + width + padding-right + border-right-width + margin-right + right = width of containing block；如果left，width和right全都是auto：先把所有margin-left和margin-right的auto设置为0，然后，如果建立static-position containing bloock的元素的direction属性为ltr，把left设置为static-position并应用下面的第3条规则，否则把right设置为static-position并应用上面的第1条规则；如果这3个值都不是auto：如果margin-left和margin-right都是auto，添加额外约束：2个margin的值相等，如果此约束会让它们为负，则当containing block的direction是ltr (rtl)，把margin-left (margin-right)设置为0，再求出margin-right (margin-left)；如果margin-left或者margin-right有一个是auto，就解方程求这个值；如果这些值是over-constrained，就忽略left（如果containing block的direction是rtl）或者right（如果direction为ltr）的值，再求出对应的值；其他情况先把为auto的margin-left或margin-right的used value设为0，按上一条计算。 Absolutely positioned, replaced elements：width的used value由inline replaced element的规则决定，如果margin-left或者margin-right被指定为auto，used value由下面的规则决定；如果left和right值都是auto，且建立static-position containing block的元素的direction属性为ltr，则left设置为static-position，如果direction为rtl，就把right设置为static-position；如果left或者right为auto，所有值为auto的margin-left和margin-right替换为0； inline-block, non-replaced elements in normal flow：如果width为auto，used value与浮动元素一样是shrink-to-fit，computed value为auto的margin-left或者margin-right的used value变为0。 inline-block, replaced elements in normal flow：与inline，replaced element规则完全一致。 Minimum and maximum widths 应用于除none-replaced inline，table row和row group之外的所有元素；对table，inline-table，table cell，table column和column group是未定义的。 先根据width和margin的规则计算出width；如果得到的width该width比max-width大，则用max-width的值代入width的computed value再进行计算；如果得到的width比min-width小，则用min-width的值代入width的computed value再进行计算（不影响真正的computed value）。 但对于有内在比例并且width和height都被指定为auto的replaced元素，规则如下：取max-width和max-height为max（max，min），下列规则中w和h代表忽略min-width，min-height，max-width和max-height属性后，width和height的计算结果；通常是内在宽度和高度，但若是具有内在比例的replaced element的情况，可能并不是；计算结果当做computed value代入计算width和margin的规则得到最后结果。 违反的约束 解得width 解得height none w h w &gt; max-width max-width max(max-width * h/w, min-height) w &lt; min-width min-width min(min-width * h/w, max-height) h &gt; max-height max(max-height * w/h, min-width) max-height h &lt; min-height min(min-height * w/h, max-width) min-height (w &lt; min-width) and (h &gt; max-height) min-width max-height (w &gt; max-width) and (h &lt; min-height) max-width min-height (w &gt; max-width) and (h &gt; max-height), where (max-width/w ≤ max-height/h) max-width max(min-height, max-width * h/w) (w &gt; max-width) and (h &gt; max-height), where (max-width/w &gt; max-height/h) max(min-width, max-height * w/h) max-height (w &lt; min-width) and (h &lt; min-height), where (min-width/w ≤ min-height/h) min(max-width, min-height * w/h) min-height (w &lt; min-width) and (h &lt; min-height), where (min-width/w &gt; min-height/h) min-width min(max-height, min-width * h/w) 内容高度：height1.百分比的计算参照生成盒的containing block；但如果containing block的高度没有显式声明（比如依赖内容高度），并且本元素不是绝对定位，computed value计算为auto（一个绝对定位元素的containing block高度独立于元素本身，因此百分比可以解出，但通常需要直到在此之后的元素处理完毕后才能获得此高度）。 计算height和margin Inline, non-replaced elements：height不适用。content area的高度应该基于字体，但本规范没有具体说明。（em-box） Inline replaced elements, block-level replaced elements in normal flow, ‘inline-block’ replaced elements in normal flow and floating replaced elements：如果margin-top或者margin-bottom为auto，其used value为0；如果height和width的computed value都是auto，并且元素还具有内在高度，那么这个内在高度就是height的used value；否则，如果height的computed value为auto，并且该元素具有内在比例，那么height的used value为：(宽度的used value) / (内在比例)；否则，如果height的computed value为auto，并且该元素具有内在高度，那么这个内在高度就是height的used value；否则，如果height的computed value为auto，但上面的条件都不满足，那么height的used value必须设置为比例为2:1，高度不超过150px并且宽度不超过设备宽度的最大矩形的高度。 Block-level non-replaced elements in normal flow when ‘overflow’ computes to ‘visible’：当overflow的computed value不为visible但已经propagate to viewport时，本节也适用；如果margin-top或者margin-bottom为auto，其used value为0；元素的height为从其top content边到下面第一个适用的（位置）的距离：如果建立了IFC，是到最后一个line box的bottom edge的距离；如果in-flow的最后一个子级（忽略float和绝对定位，相对定位的忽略偏移来考虑）的bottom margin没有与元素的bottom margin合并，到此子级margin bottom边的距离；如果最后一个子级的top margin没有和元素的bottom margin合并的话，到此子级bottom border edge的距离；否则就是0。 除了符合以下规则，均按此计算height：如果top和height都是auto，bottom不是auto，则高度是根据hright为auto的算法由内容决定，把值为auto的margin-top和margin-bottom设置为0，再求出top；如果top和bottom都是auto，height不是auto，则把top设置为static position，把值为auto的margin-top和margin-bottom设置为0，再求出bottom；如果height和bottom都是auto，top不是auto，则高度根据height为auto的算法由内容决定，把值为auto的margin-top和margin-bottom设置为0，再求出bottom；如果top是auto，height和bottom都不是auto，则把值为auto的margin-top和margin-bottom设置为0，再求出top；如果height是auto，top和bottom都不是auto，则把值为auto的margin-top和margin-bottom设置为0，再求出height。如果’bottom’是’auto’，’top’和’height’都不是’auto’，则把值为’auto’的’margin-top’和’margin-bottom’设置为0，再求出’bottom’ Absolutely positioned, non-replaced elements：需符合以下等式：top + margin-top + border-top-width + padding-top + height + padding-bottom + border-bottom-width + margin-bottom + bottom = height of containing block；如果top，height和bottom都是auto，把top设置为static position并应用上一条的第3条规则：如果top，height和bottom都不是auto：如果margin-top和margin-bottom都是auto，添上额外约束：2个margin的值相等，如果margin-top或者margin-bottom有一个是auto，解方程求出这个值，如果被过度约束了，就忽略bottom的值再求；否则，按照上一条求值。 Absolutely positioned, replaced elements：height的used value由inline，replaced元素规则决定，如果margin-top或者margin-bottom被指定为auto，其used value如下计算：根据replaced元素规则求出height，套入non-replaced的规则。 Complicated cases：适用于normal flow中overflow的computed value不为visible的block-level，non-replaced元素；inline-block，non-replaced元素以及floating，non-replaced元素；如果margin-top或者margin-bottom为auto，其used value为0，如果height是auto，参照以下第二条算法；对于inline-block元素，在计算行盒的高度时，要用到margin box。 ‘Auto’ heights for block formatting context roots：如果它只含有inline-level子级，高度就是topmost的line box的top与bottommost的line box的bottom之间的距离；如果只含有block-level子级，高度由就是topmost的block-level子级盒的top margin-edge到bottommost的block-level子级盒的bottom margin-edge之间的距离；绝对定位的子级会被忽略，而相对定位的盒不考虑其偏移；此外，如果元素含有任意bottom margin边位于元素的content边下方的的浮动后代，那么高度增加至能够包含这些边；只考虑参与此块级格式化上下文的浮动，不考虑绝对定位的后代中的浮动或者其它浮动。 min-height和max-height 将如下影响height的used value：计算暂定的应用高度（不考虑min-height和max-height）遵循上面“计算height与margin”中的规则，如果这个暂定高度大于max-height，就再应用一遍上面的规则，这次把max-height的值作为height的计算值，如果产生的高度小于min-height，就再应用一遍上面的规则，但这次把min-height的值作为height的计算值。 计算行高：line-hight和vertical-align 一个line box的高度决定如下：对每个元素计算高度，replaced, inline-block和inline-table元素来说，是margin box的高度，对inline box来说是它们的line-height（但line-height对inline box的padding margin的边界无关，也即不影响box的视觉高度）；行盒高度是最高的盒的top与最低的盒的bottom之间的距离（包括下面’line-height’中解释的strut） leading和half leading：任何字体存在height A和depth D，UA把non-replaced的inline box中按baseline对齐，不含任何font就认为还有一个宽度为0的strut，具有第一个可用字体的A和D；分别在A和D上加half leading（leading可以为负）。 visual effectsoverflow and clipping 通常内容被限制在content区域内，但是以下情况将超出：一行无法分割换行导致宽度超出；block-level box的width指定为超过containing block的width的值；一个元素的height超过显示指定的containing block的height；绝对定位的元素，这种盒并不一定会根据其祖先的overflow属性裁剪，尤其它们不会被介于自身和包含块之间的任意祖先的overflow裁剪；负的margin导致内容在盒外部；text-indent导致inline box悬挂在外部；clip发生时，裁剪到该盒的padding edge。 overflow：应用于block container，指定内容overflow时是否clip，但无法指定containing block为viewport或它的祖先元素的后代元素内容的裁剪；根元素或者根元素有一个body子元素，则需要把overflow属性传递到viewport上，被传播的元素必须具有值为visible的overflow；visible应用于viewport时，须解释为auto；scrollbar插入在border内。 clip：只应用于绝对定位的元素；唯一合法的值为：rect(, , , )，auto时为border edge。 visibolity：控制box是否render，display为none将不生成box；不可见的盒仍然会影响布局，而且该元素具有’visibility:visible’的后代将是可见的。 Generated content, automatic numbering, and lists自动生成内容，有时希望不是来自document tree，来自和before和after伪元素一起使用的content以及display为list-item的元素。 :before和:after伪元素 元素生成的box包含:before和:after伪元素的内容，伪元素将从此元素继承任何能够继承的属性，不继承的属性取initial value；replaced element内的:before和:after伪元素未定义，可能生成也可能不生成。 content属性 应用于:before和:after伪元素，属性值none不生成伪元素，属性值normal的compouted value对于:before和:after均为none；其他属性值有, , attr。 ‘\\A’可以用做content、内的换行，但受white-space的约束。 引号 quotes属性用来指定引号所使用的表示对。 Automatic counters and numberingcounter-increment属性接受一个或者多个计数器名（identifier），每个后面都可以跟一个可选的整数，这个整数表示每次出现该元素时计数器递增几，默认增量是1，可以接受0和负数；counter-reset属性也接受一个或者多个计数器，每个后面可以跟一个可选的整数，该整数给出了该元素每次出现时计数器的设定值，默认为0；如果一个元素increment/reset一个计数器并使用了它（在其:before或:after伪元素的’content’属性中），计数器是在increment/reset之后才使用的；如果一个计数器被同时rest和increment，计数器会先reset再increment；如果给同一个计数器指定了多次counter-reset和counter-increment属性的值，计数器的每次重置/递增会按指定的顺序来处理；counter-reset属性遵循cascading规则。 Nested counters and scope：counter是self-nesting的，如果在后代元素或者伪元素中reset一个counter的话，讲建立这个counter的一个新实例；一个计数器的scope从document中第一个具有该计数器的counter-reset的元素开始，包括该元素的后代和它后面兄弟及其兄弟的后代，但不包括通过该元素的后续兄弟的counter-reset或者后续相同元素的counter-reset创建的同名计数器范围内的任何元素；如果一个元素或者伪元素上的counter-increment或者content引用了一个不处于任何counter-reset范围的计数器，应该表现得就像已经通过该元素或者伪元素上的一个counter-reset把该计数器重置为0。 计数器样式：list-style-type的所有属性都可用于计数器。 display: none的元素的计数器：不生成box或者不生成伪元素将不会使计数器increment或者reset；visibility为hidden的元素会让计数器increment和reset。 lists display: list-item将生成一个pricipal box和一个marker box，marker box的背景是transparent的，background只能指定pricipal box的背景。 list-style-type：当list-item-image为none或者uri指定的图片无法显示时，指定了list item marker的外观。 list-style-image：如果该图片具有一个内在宽度和高度，宽度和高度的应用值就是内在宽度和高度；否则，如果该图片具有一个内在比例和一个内在宽度或者内在高度，宽度/高度的应用值与提供的内在宽度/高度相同，缺失的尺寸的应用值根据已提供的尺寸和比例来计算；否则，如果图片具有一个内在比例，则宽度的应用值为1em，高度的应用值根据这个宽度和内在比例计算。如果这会让高度大于1em，那么高度的应用值就设置为1em，宽度的应用值根据这个高度和内在比例来计算；否则，该图片宽度的应用值为其内在宽度，如果有的话，否则就是1em。图片高度的应用值为其内在高度，如果有的话，否则就是1em。 list-style-position：inside使marker box位于principal box的第一个inline box； list-style：list-style-type，list-style-position，list-style-image的简略写法。 颜色和背景Foreground color：color属性Background在盒模型中，background指content，padding，border；border的背景在border属性中设置；margin的background是transparent；background-color的initial value也是transparent，因此将导致父级元素的背景透到子元素上；html和body的background属性将propagate to the canvas。 background-color：initial value是transparent，将使下层的颜色透上来。 background-image：当image可用时，将在color上层；百分比形式的内在尺寸必须根据为background-position属性建立坐标系的矩形的尺寸来解析；如果具有一个内在宽度或者内在高度和内在比例，那么缺少的尺寸就根据给定的尺寸和比例来计算；如果图片具有一个内在宽度或者内在高度但没有内在宽高比，那么缺少的尺寸被假设为给background-position属性建立坐标系的矩形的尺寸；如果图片没有内在尺寸但具有一个内在比例，就把尺寸假定为不超出给background-position属性建立坐标系的矩形中满足该比例的最大尺寸；如果图片没有内在比例，那么就把尺寸假定为给background-position属性建立坐标系的矩形。 background-repeat：initial value为repeat，当指定了image时，将使其铺满content，padding和border。 background-position：initial value为0%，0%；如果只指定一个值，第二个值为center；根元素和body元素上的background虽然传递到了canvas但是定位仍然好像只是针对该元素一样；百分比根据padding box。 background-attachment：当指定了image时，该属性指定了它应该相对viewport固定（fixed）还是随containing block滚动（scroll），默认为scroll。 background：简写属性，先将属性设为初始值，再用显式值覆盖。 字体font-family分隔使用逗号，表示alternative。 font-style斜体与否，oblique或italic。 font-variant类似于变成大写，small-cap。 font-weightnormal对应于400，bold对应于700；lighter和bolder都是对应于继承的weight而言的。 font-size在所有其它属性上，em和ex长度值参照当前元素字体大小的计算值。在font-size属性上，这些长度单位参照其父元素的字体大小的计算值。 文本（text）text-indent 指定百分比时参照containing block的width；应用于block container。 letter-spacing和word-spacing在默认间距基础上指定额外的间距。 text-decoration当继承时，颜色将使用继承自祖先的前景色（color）。 表格css table modeldisplay为table-column或者tabl-column-group的元素将不会被渲染。 row group box：A table-row-group, table-header-group, or table-footer-group； proper table child：A table-row box, row group box, table-column box, table-column-group box, or table-caption box； proper table row parent：A table or inline-table box or row group box； internal table box：A table-cell box, table-row box, row group box, table-column box, or table-column-group box. tabular container：A table-row box or proper table row parent 按照如下三步骤来处理：首先移除不相关的盒：包括所有table-column的后代，所有table-column-group的后代，所有tabular container的 只包含white space的anonymous inline box并且兄弟都是proper table children，所有只包含white space的anonymous inline box并且兄弟都是table-caption或者internal table nox；然后生成缺失的子级容器：如果一个table, inline-table box的子级不是一个proper table child，则用一个anonymous table-row包裹它和它同不是proper table child的兄弟元素，如果一个row group box的子级不是一个table-row，则用一个anonymous table-row包裹它和它同不是table-row的兄弟元素，如果一个table-row的子级不是一个table-cell，则用一个table-cell包裹它和它同不是table-cell的兄弟元素；最后生成缺失的父级：misparent的table-cell将生成一个table-row包裹它和兄弟table-cell，misparent的proper table child将生成一个table或者inline-table包裹它和它兄弟proper table child。 columns width将给此column设定一个min-width；当table-cell和row的背景都是透明时，background将给比column设置背景色；visibility为collapse理论上会截掉此column，但浏览器实现不完全，除collapse外的其他值无效；当table上的border-collapse为collapse时，column上的border将起效，但需根据冲突解决方法在cell上选一条border。 table的visual formatting model 可以表现得像一个block-level（对于display: table）或者inline-level（对于display: inline-table）元素；这两种情况下，表格都会生成一个table wrapper box的pricipal block box，table wrapper box的level由display属性决定并且生成新的BFC，它包含table box以及所有caption box（按文档顺序）。table box是一个含有该表格的internal table box的block level box。caption box是保留其原本的content，padding，margin和border区的block level box，会被当作table wrapper box中的常规块盒来渲染。caption box放在表格盒前面还是后面由caption-side属性决定；table box用在对一个inline-table进行基线竖直对齐时，table wrapper box的宽度是它里面的table box的border边宽度（border-edge width）。表格上’width’和’height’的百分比是相对于table wrapper box的containing box的，position，float，margin-*，top，right，bottom和left属性的计算值被应用在table wrapper box上，所有其它不可继承的属性值应用在table box上，（对于表格元素上没有应用于表格和表格容器盒的值，就改用初始值）。 caption的position和aligment：在css3中已改为top-outside和bottom-outside。 table content的visual layout internal table element都没有margin（也就是除了caption），并且其中只有cell有padding。 cell占据的首个column不能与之前row的cell发生overlap。 在collapsing border model中，row, column等的边界与假想的grid cell重合，seperated border model中有空隙（border-spacing）。 cell的float将使它不再是table的一部分，anonymous table object将生成。 table的layer 从下往上：table, column group, column, row group, row, table cell；它们的背景将影响从它们内部开始originate的cell，如果内容为空cell的empty-cells为hide（需在separate border model下），则table的背景将透上来。 没有元素或者伪元素为内容的cell称为missing cell，将被当做anonymous table-cell处理。 table width和算法table-layout属性 除了fixed layout，UA可以自由选择算法使速度比精度优先。 table的width算法不同于普通width，到解得width之后，其他如margin算法则与普通情况相同。 fixed table-layout：快速算法，不依赖于table内容；width通常需要显式指定，当被指定auto时将使用auto table-layout，特殊情况当UA支持width为auto的fixed table-layout时，width将按普通情况计算；column的width当有指定或者包含的第一个cell有指定时就是指定宽度，没有时将和其他column平分剩余宽度；只要拿到table第一行就能得到整个table的布局。 automatic table layout：和fixed layout不同，将至少遍历table一遍，因此效率比较低；首先得到每个cell的min和max的width，然后根据只占一个column的cell得到该column的min和max的width，在然后根据跨多列的cell和被跨的其他column一起保证cell的min和maxwidth得到满足，最后如果column所在的column group有指定width，应使column的min的width之和至少达到column的width；类似也可以得到caption的min的width；当table或者inline-table的width显示指定不为auto时，将取三者的最大作为table宽度的应用值，当table或者inline-table的width为auto时，将取前两者和containing block的width中最大为table的应用值（特殊的，当这个width的值大于所有column max的width的和时，取max width和caption的较大者为应用值）。 table的高度算法 在table上设置的height除了auto外都将视为min-height，auto指height是各个row的height之和外加spacing和border，table上height设置为auto讲使用row的MIN hight值；而各个row的height是该row heihgt的computed value，该row内各cell height的computed value以及该cell的最小所需height中的最大值，其中table cell的height由最小所需height值决定，在table-cell上指定的height只影响该cell所在row的高度；某一row的baseline由在该行内的具有top到baseline最大距离的cell决定，cell的baseline由cell内的第一个in-flow的line box或者in-flow table-row决定，若没有这样的元素，baseline是这个table-cell的bottom content edge；如果table-row没有据baseline对齐的元素，则它自身的baseline是最低的cell的bottom content edge。 cell放置顺序：首先，放置那些相对于baseline对齐的cell，这将建立row baseline；然后，放置具有vertical-align: top的cell；现在row具有top，可能有baseline，还有个暂定高度，（暂定高度）为从顶部到目前已定位的单元格中最低的底部（见下面单元格padding的情况）；如果任意剩余的与bottom或者middle对齐的单元格具有大于该行当前高度的高度，通过降低bottom，将该row的高度增加至这些cell高度的最大值；最后定位其余cell；小于row高度的cell box会被添上额外的top或者bottom padding。 column中的水平对齐 text-align 动态行列效果 visibility: collaspse将row或column等同于display: none，但是将不强制table进行re-layout。 table的border 两种边框模型：collaspe和separare，collapse使边框相连，separate使边框相对独立。 separate border model：有border-spacing属性，指定一个值时为水平间距，两个值时后一个为竖直间间距，table到边上的cell的距离为指定的border-spacing加上此边的padding；border-spacing的空间内为table的background，column, row, column-group, row-group只包含cell；empty-cells（visibility为hidden或者不包含float和in-flow的元素）在此model下为hide时将使table背景透上来以及border的不显示，当整个row的cell都是empty且empty-cells属性都为hide时，此行高度为0。 collapsing border model：row的宽度等式：row-width = (0.5 border-width1) + padding-left1 + width1 + padding-right1 + border-width1 + padding-left2 +…+ padding-rightn + (0.5 border-widthn)；UA将使用第一行第一的和最后一个cell border的一半分别作为table的左右border，如果之后的行有超过第一行的border宽度，这些超过的宽度将进入table的margin（这些超出的内容需要考虑进是否overflowtable的父元素）；table的top和bottom的border将分别采用第一行和最后一行cell宽度最大的border；此border model下的table没有padding，table的width计算到border。 边框的冲突处理（取最显眼的）：border-style为hidden的border最优先，会抑制此位置的所有其他border；具有none样式的border优先级最低，只有在与该边相关的所有元素的border属性为none时，border才会被忽略；其次，width更大的边框将会采用，如果有好几个都具有相同的border-width，那么样式按这样的顺序来选择：double，solid，dashed，dotted，ridge，outset，groove和优先级最低的：inset；如果border style只在颜色上有差异，更在table layer上层的更优先更上面的更优先，更左边的更优先（direction为ltr时）。 用户界面outline outline不引起reflow。","categories":[],"tags":[{"name":"css translation","slug":"css-translation","permalink":"http://yoursite.com/tags/css-translation/"}]}]}